// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id               String       @unique @default(uuid())
  name             String       @unique
  description      String
  frameworks       Frameworks[]
  status           Status       @default(NOT_STARTED)
  priority         Priority     @default(NORMAL)
  dueDate          DateTime
  timeline         DateTime[]
  budget           String?
  assignedToUserId String?
  assignedToUser   User?        @relation(fields: [assignedToUserId], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  comments         Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  role             Role?     @default(VIEWER)
  accounts         Account[]
  sessions         Session[]
  teams            Teams[]   @relation("members")
  assignedProjects Project[]
  comments         Comment[]
  likes            Like[]
  replies          Reply[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Comment {
  id        String        @unique @default(uuid())
  content   String
  status    CommentStatus @default(QUESTION)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  projectId String
  project   Project       @relation(fields: [projectId], references: [id])
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  likes     Like[]
  replies   Reply[]       @relation("ReplyToComment")
}

model Reply {
  id        String        @unique @default(uuid())
  content   String
  status    CommentStatus @default(REPLY)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  commentId String
  comment   Comment       @relation("ReplyToComment", fields: [commentId], references: [id])
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  likes     Like[]
}

enum CommentStatus {
  BUG
  DOCUMENTATION
  ENHANCEMENT
  HELP_WANTED
  QUESTION
  REPLY
}

model Like {
  id        String   @unique @default(uuid())
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  reply     Reply?   @relation(fields: [replyId], references: [id])
  replyId   String?

  @@unique([commentId, userId])
}

model Teams {
  id          String   @id @default(cuid())
  name        String
  description String
  industry    String?
  rating      String?
  members     User[]   @relation("members")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Frameworks {
  REACTJS
  NODEJS
  NEXTJS
  PYTHON
  DJANGO
  FLASK
  FASTAPI
  ASPDOTNET
  TYPESCRIPT
  JAVASCRIPT
  CPLUSPLUS
  CSHARP
  RUST
  JAVA
  PHP
  RUBY
  GOLANG
  SWIFT
  KOTLIN
  DART
  ANGULAR
  VUEJS
  DOTNET
  HTML
  CSS
  SQL
  MYSQL
  POSTGRESQL
  SQLITE
  SQLALCHEMY
  MONGODB
  C
  R
  SWIFTUI
  BASH
  PERL
  JQUERY
  SELENIUM
  DOCKER
  KUBERNETES
  JENKINS
  GITLAB
  GITHUB
  ANSIBLE
  PROMETHEUS
  GRAFANA
  AWS
  AZURE
  GOOGLECLOUD
  EXPRESSJS
  SPRINGBOOT
  FLUTTER
  LARAVEL
  REACTNATIVE
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  STUCK
  COMPLETED
  CANCELLED
  PENDING
  OVERDUE
  REOPENED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum Role {
  ADMIN
  MODERATOR
  MEMBER
  VIEWER
}
